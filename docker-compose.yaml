services:
  # Vector database for semantic search
  qdrant:
    image: qdrant/qdrant:v1.7.4
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/6333' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database for customer service data
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: customer_service
      POSTGRES_USER: cs_user
      POSTGRES_PASSWORD: cs_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./infra/database/seed_data.sql:/docker-entrypoint-initdb.d/02-seed_data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cs_user -d customer_service"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Main backend API
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - QDRANT_URL=http://qdrant:6333
      - DATABASE_URL=postgresql://cs_user:cs_password@postgres:5432/customer_service
      - MCP_SERVER_URL=http://mcp_server:8001
      - WORKER_URL=http://worker:8002
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mcp_server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MCP Server for inter-service communication and tool access
  mcp_server:
    build: ./mcp_server
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://cs_user:cs_password@postgres:5432/customer_service
      - BACKEND_URL=http://backend:8000
      - WORKER_URL=http://worker:8002
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker service for background tasks
  worker:
    build: ./worker
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://cs_user:cs_password@postgres:5432/customer_service
      - MCP_SERVER_URL=http://mcp_server:8001
      - BACKEND_URL=http://backend:8000
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "5173:8080"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_MCP_BASE_URL=http://localhost:8001
      - VITE_WORKER_BASE_URL=http://localhost:8002
    depends_on:
      - backend
      - mcp_server
      - worker

volumes:
  qdrant_data:
  postgres_data:

networks:
  default:
    name: app-network
