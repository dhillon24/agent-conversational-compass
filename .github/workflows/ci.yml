
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.7.4
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Lint with ruff
      run: |
        cd backend
        pip install ruff
        ruff check .
    
    - name: Format with black
      run: |
        cd backend
        pip install black
        black --check .
    
    - name: Type check with mypy
      run: |
        cd backend
        pip install mypy
        mypy . --ignore-missing-imports
    
    - name: Run backend tests
      env:
        QDRANT_URL: http://localhost:6333
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
      run: |
        cd backend
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint frontend
      run: |
        cd frontend
        npm run lint
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Test frontend
      run: |
        cd frontend
        npm test -- --coverage
      env:
        CI: true

  test-integration:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start services with Docker Compose
      run: |
        cp .env.example .env
        docker compose up -d --build
    
    - name: Wait for services to be ready
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:6333/health; do sleep 5; done'
    
    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost:5173/
        
        # Test chat endpoint
        curl -X POST http://localhost:8000/chat \
          -H "Content-Type: application/json" \
          -d '{"user": "test_user", "message": "Hello, I need help with payment for invoice #123"}'
    
    - name: Collect service logs
      if: failure()
      run: |
        docker compose logs

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/customer-service-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/customer-service-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/customer-service-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/customer-service-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push MCP server image
      uses: docker/build-push-action@v5
      with:
        context: ./mcp_server
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/customer-service-mcp:latest
          ${{ secrets.DOCKER_USERNAME }}/customer-service-mcp:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push worker image
      uses: docker/build-push-action@v5
      with:
        context: ./worker
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/customer-service-worker:latest
          ${{ secrets.DOCKER_USERNAME }}/customer-service-worker:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deployment step would go here"
        echo "This could deploy to:"
        echo "- Kubernetes cluster"
        echo "- Docker Swarm"
        echo "- Cloud provider (AWS, GCP, Azure)"
        echo "- VPS with Docker Compose"
